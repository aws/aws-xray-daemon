name: Continuous Build and Publish
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
permissions:
  id-token: write
  contents: read
jobs:
  build:
    name: Build on ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16.6'

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build archives and test
        run: make build test
        env:
          VERSION: ${{ github.sha }}
      
      - name: Build linux archives
        if: ${{ runner.os == 'Linux' }}
        run: make packaging
        env:
          VERSION: ${{ github.sha }}

      - name: Configure AWS Credentials
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' }}
        run: |
          export AWS_DEFAULT_REGION=us-east-1
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_ROLE_ARN=${{ secrets.AWS_ASSUME_ROLE_ARN_RELEASE }}
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV
          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sigstore" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

      - name: Verify Daemon binary
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' }}
        run: |
          build/xray-linux-amd64/xray -o -l dev &
          sleep 10
          echo -e '{"format":"json","version":1}\nx' | nc -w 1 -u 127.0.0.1 2000
          sleep 10
          ProcNumber=$(ps -ef |grep -w xray|grep -v grep|wc -l)
          echo $ProcNumber
          if [[ $ProcNumber == 0 ]]; then
            exit 1
          fi

      - name: Download package signing GPG secret key
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' }}
        run: |
          aws secretsmanager get-secret-value --region us-east-1 --secret-id "XRayDaemonSecrets" | jq -r ".SecretString" > aws-xray-secret.gpg
          md5sum aws-xray-secret.gpg

      - name: Import signing GPG key
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' }}
        run: |
          gpg --import aws-xray-secret.gpg
          gpg --list-keys
          gpg --armor --export -a "aws-xray@amazon.com" > aws-xray-public.gpg
          rpm --import aws-xray-public.gpg
          shred -fuvz aws-xray-secret.gpg
          shred -fuvz aws-xray-public.gpg

      - name: Sign daemon packages
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' }}
        run: ./Tool/src/packaging/sign-packages.sh

      - name: Remove Package Signing GPG Key from local GPG Key Ring
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' }}
        run: |
          gpg --fingerprint --with-colons aws-xray@amazon.com | grep -m 1 "fpr" | sed -n 's/^fpr:::::::::\([[:alnum:]]\+\):/\1/p' | xargs gpg --batch --yes --delete-secret-keys
          gpg --list-secret-keys
      
      - name: Upload archives as actions artifact
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-artifact@v2
        with:
          name: distributions
          path: build/dist/

      - name: Login to Public ECR
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' }}
        run: aws ecr-public get-login-password | docker login --username AWS --password-stdin public.ecr.aws

      - name: Login to DockerHub
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Set up Docker Buildx
        if: ${{ runner.os == 'Linux' }}
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build docker image for public ECR
        if: ${{ runner.os == 'Linux' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' }}
          platforms: linux/amd64,linux/arm64
          tags: |
            public.ecr.aws/xray/aws-xray-daemon:alpha
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build docker image for DockerHub
        if: ${{ runner.os == 'Linux' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.amazonlinux
          push: ${{ github.event_name == 'push' }}
          platforms: linux/amd64,linux/arm64
          tags: |
            amazon/aws-xray-daemon:alpha
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
